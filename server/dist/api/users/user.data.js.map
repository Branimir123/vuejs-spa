{"version":3,"sources":["../../../api/users/user.data.js"],"names":["User","passwordHasher","create","user","hashedPassword","hashPassword","password","newUser","email","name","Promise","resolve","reject","save","err","findByEmail","findOne","getById","id","findById","populate","path","then","populated","updateUser","options","picture","getAll","find","delete","remove","_id","toggleAdmin","makeAdmin","role"],"mappings":";;;;;;AAAA;;kBAEe,UAACA,IAAD,QAA8B;AAAA,MAArBC,cAAqB,QAArBA,cAAqB;;AAC3C,SAAO;AACLC,YAAQ,gBAACC,IAAD,EAAU;AAChB,UAAMC,iBAAiBH,eAAeI,YAAf,CAA4BF,KAAKG,QAAjC,CAAvB;;AAEA,UAAMC,UAAU,IAAIP,IAAJ,CAAS;AACvBQ,eAAOL,KAAKK,KADW;AAEvBC,cAAMN,KAAKM,IAFY;AAGvBH,kBAAUF;AAHa,OAAT,CAAhB;;AAMA,aAAO,IAAIM,iBAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCL,gBAAQM,IAAR,CAAa,UAACC,GAAD,EAAS;AACpB,cAAIA,GAAJ,EAAS;AACPF,mBAAOE,GAAP;AACD;;AAEDH,kBAAQR,IAAR;AACD,SAND;AAOD,OARM,CAAP;AASD,KAnBI;AAoBLY,iBAAa,qBAACP,KAAD,EAAW;AACtB,aAAO,IAAIE,iBAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCZ,aAAKgB,OAAL,CAAa;AACXR;AADW,SAAb,EAEG,UAACM,GAAD,EAAMX,IAAN,EAAe;AAChB,cAAIW,GAAJ,EAAS;AACPF,mBAAOE,GAAP;AACD;;AAEDH,kBAAQR,IAAR;AACD,SARD;AASD,OAVM,CAAP;AAWD,KAhCI;AAiCLc,aAAS,iBAACC,EAAD,EAAQ;AACf,aAAOlB,KACJmB,QADI,CACKD,EADL,EAEJE,QAFI,CAEK;AACRC,cAAM;AADE,OAFL,EAKJC,IALI,CAKC,qBAAa;AACjB,eAAOZ,kBAAQC,OAAR,CAAgBY,SAAhB,CAAP;AACD,OAPI,CAAP;AAQD,KA1CI;AA2CLC,gBAAY,oBAACN,EAAD,EAAKO,OAAL,EAAiB;AAC3B,aAAO,IAAIf,iBAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCZ,aAAKmB,QAAL,CAAcD,EAAd,EAAkB,UAACJ,GAAD,EAAMX,IAAN,EAAe;AAC/B,cAAIW,GAAJ,EAAS;AACPF,mBAAOE,GAAP;AACD;;AAED,cAAI,CAACX,IAAL,EAAW;AACT,mBAAOQ,QAAQ,IAAR,CAAP;AACD;;AAEDR,eAAKK,KAAL,GAAaiB,QAAQjB,KAAR,IAAiBL,KAAKK,KAAnC;AACAL,eAAKM,IAAL,GAAYgB,QAAQhB,IAAR,IAAgBN,KAAKM,IAAjC;AACAN,eAAKuB,OAAL,GAAeD,QAAQC,OAAR,IAAmBvB,KAAKuB,OAAvC;;AAEAvB,eAAKU,IAAL,CAAU,UAACC,GAAD,EAAS;AACjB,gBAAIA,GAAJ,EAAS;AACPF,qBAAOE,GAAP;AACD;;AAEDH,oBAAQR,IAAR;AACD,WAND;AAOD,SApBD;AAqBD,OAtBM,CAAP;AAuBD,KAnEI;AAoELwB,YAAQ,kBAAM;AACZ,aAAO3B,KAAK4B,IAAL,CAAU,EAAV,CAAP;AACD,KAtEI;AAuELC,YAAQ,iBAACX,EAAD,EAAQ;AACd,aAAOlB,KAAK8B,MAAL,CAAY,EAAEC,KAAKb,EAAP,EAAZ,CAAP;AACD,KAzEI;AA0ELc,iBAAa,qBAACd,EAAD,EAAKe,SAAL,EAAmB;AAC9B,aAAOjC,KAAKmB,QAAL,CAAcD,EAAd,EACJI,IADI,CACC,gBAAQ;AACZ,YAAIW,SAAJ,EAAe;AACb9B,eAAK+B,IAAL,GAAY,OAAZ;AACD,SAFD,MAEO;AACL/B,eAAK+B,IAAL,GAAY,MAAZ;AACD;;AAED,eAAO/B,KAAKU,IAAL,EAAP;AACD,OATI,CAAP;AAUD;AArFI,GAAP;AAuFD,C","file":"user.data.js","sourcesContent":["import { Promise } from 'bluebird';\n\nexport default (User, { passwordHasher }) => {\n  return {\n    create: (user) => {\n      const hashedPassword = passwordHasher.hashPassword(user.password);\n\n      const newUser = new User({\n        email: user.email,\n        name: user.name,\n        password: hashedPassword\n      });\n\n      return new Promise((resolve, reject) => {\n        newUser.save((err) => {\n          if (err) {\n            reject(err);\n          }\n\n          resolve(user);\n        })\n      });\n    },\n    findByEmail: (email) => {\n      return new Promise((resolve, reject) => {\n        User.findOne({\n          email\n        }, (err, user) => {\n          if (err) {\n            reject(err);\n          }\n\n          resolve(user);\n        });\n      });\n    },\n    getById: (id) => {\n      return User\n        .findById(id)\n        .populate({\n          path: 'events'\n        })\n        .then(populated => {\n          return Promise.resolve(populated);\n        });\n    },\n    updateUser: (id, options) => {\n      return new Promise((resolve, reject) => {\n        User.findById(id, (err, user) => {\n          if (err) {\n            reject(err);\n          }\n\n          if (!user) {\n            return resolve(null);\n          }\n\n          user.email = options.email || user.email;\n          user.name = options.name || user.name;\n          user.picture = options.picture || user.picture;\n\n          user.save((err) => {\n            if (err) {\n              reject(err);\n            }\n\n            resolve(user);\n          });\n        });\n      });\n    },\n    getAll: () => {\n      return User.find({});\n    },\n    delete: (id) => {\n      return User.remove({ _id: id });\n    },\n    toggleAdmin: (id, makeAdmin) => {\n      return User.findById(id)\n        .then(user => {\n          if (makeAdmin) {\n            user.role = 'admin';\n          } else {\n            user.role = 'user';\n          }\n\n          return user.save();\n        });\n    }\n  };\n}"]}