{"version":3,"sources":["../../../api/post/post.data.js"],"names":["Post","create","post","newPost","email","name","Promise","resolve","reject","save","err","getById","id","findById","populate","path","then","populated","updatePost","options","title","description","picture","getAll","find","delete","remove","_id"],"mappings":";;;;;;AAAA;;kBAEe,UAACA,IAAD,EAAU;AACvB,SAAO;AACLC,YAAQ,gBAACC,IAAD,EAAU;AAChB,UAAMC,UAAU,IAAIH,IAAJ,CAAS;AACvBI,eAAOF,KAAKE,KADW;AAEvBC,cAAMH,KAAKG;AAFY,OAAT,CAAhB;;AAKA,aAAO,IAAIC,iBAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCL,gBAAQM,IAAR,CAAa,UAACC,GAAD,EAAS;AACpB,cAAIA,GAAJ,EAAS;AACPF,mBAAOE,GAAP;AACD;;AAEDH,kBAAQL,IAAR;AACD,SAND;AAOD,OARM,CAAP;AASD,KAhBI;AAiBLS,aAAS,iBAACC,EAAD,EAAQ;AACf,aAAOZ,KACJa,QADI,CACKD,EADL,EAEJE,QAFI,CAEK;AACRC,cAAM;AADE,OAFL,EAKJC,IALI,CAKC,qBAAa;AACjB,eAAOV,kBAAQC,OAAR,CAAgBU,SAAhB,CAAP;AACD,OAPI,CAAP;AAQD,KA1BI;AA2BLC,gBAAY,oBAACN,EAAD,EAAKO,OAAL,EAAiB;AAC3B,aAAO,IAAIb,iBAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCR,aAAKa,QAAL,CAAcD,EAAd,EAAkB,UAACF,GAAD,EAAMR,IAAN,EAAe;AAC/B,cAAIQ,GAAJ,EAAS;AACPF,mBAAOE,GAAP;AACD;;AAED,cAAI,CAACR,IAAL,EAAW;AACT,mBAAOK,QAAQ,IAAR,CAAP;AACD;;AAEDL,eAAKkB,KAAL,GAAaD,QAAQC,KAAR,IAAiBlB,KAAKkB,KAAnC;AACAlB,eAAKmB,WAAL,GAAmBF,QAAQE,WAAR,IAAuBnB,KAAKmB,WAA/C;AACAnB,eAAKoB,OAAL,GAAeH,QAAQG,OAAR,IAAmBpB,KAAKoB,OAAvC;;AAEApB,eAAKO,IAAL,CAAU,UAACC,GAAD,EAAS;AACjB,gBAAIA,GAAJ,EAAS;AACPF,qBAAOE,GAAP;AACD;;AAEDH,oBAAQL,IAAR;AACD,WAND;AAOD,SApBD;AAqBD,OAtBM,CAAP;AAuBD,KAnDI;AAoDLqB,YAAQ,kBAAM;AACZ,aAAOvB,KAAKwB,IAAL,CAAU,EAAV,CAAP;AACD,KAtDI;AAuDLC,YAAQ,iBAACb,EAAD,EAAQ;AACd,aAAOZ,KAAK0B,MAAL,CAAY,EAAEC,KAAKf,EAAP,EAAZ,CAAP;AACD;AAzDI,GAAP;AA2DD,C","file":"post.data.js","sourcesContent":["import { Promise } from 'bluebird';\n\nexport default (Post) => {\n  return {\n    create: (post) => {\n      const newPost = new Post({\n        email: post.email,\n        name: post.name\n      });\n\n      return new Promise((resolve, reject) => {\n        newPost.save((err) => {\n          if (err) {\n            reject(err);\n          }\n\n          resolve(post);\n        })\n      });\n    },\n    getById: (id) => {\n      return Post\n        .findById(id)\n        .populate({\n          path: 'comments'\n        })\n        .then(populated => {\n          return Promise.resolve(populated);\n        });\n    },\n    updatePost: (id, options) => {\n      return new Promise((resolve, reject) => {\n        Post.findById(id, (err, post) => {\n          if (err) {\n            reject(err);\n          }\n\n          if (!post) {\n            return resolve(null);\n          }\n\n          post.title = options.title || post.title;\n          post.description = options.description || post.description;\n          post.picture = options.picture || post.picture;\n\n          post.save((err) => {\n            if (err) {\n              reject(err);\n            }\n\n            resolve(post);\n          });\n        });\n      });\n    },\n    getAll: () => {\n      return Post.find({});\n    },\n    delete: (id) => {\n      return Post.remove({ _id: id });\n    }\n  };\n}"]}