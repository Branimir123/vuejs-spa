{"version":3,"sources":["../../../api/auth/auth.controller.js"],"names":["User","passwordHasher","tokenManager","login","req","res","body","email","password","sendStatus","findOne","err","user","send","isMatch","verifyPassword","payload","sub","_id","token","encode"],"mappings":";;;;;;kBAAe,UAACA,IAAD,QAA4C;AAAA,QAAnCC,cAAmC,QAAnCA,cAAmC;AAAA,QAAnBC,YAAmB,QAAnBA,YAAmB;;AACvD,WAAO;AACHC,eAAO,eAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,4BACWD,IAAIE,IADf;AAAA,gBACTC,KADS,aACTA,KADS;AAAA,gBACFC,QADE,aACFA,QADE;;;AAGjB,gBAAI,CAACD,KAAD,IAAU,CAACC,QAAf,EAAyB;AACrB,uBAAOH,IAAII,UAAJ,CAAe,GAAf,CAAP;AACH;;AAEDT,iBAAKU,OAAL,CAAa,EAAEH,YAAF,EAAb,EAAwB,UAACI,GAAD,EAAMC,IAAN,EAAe;AACnC,oBAAID,GAAJ,EAAS;AACL,2BAAON,IAAIQ,IAAJ,CAASF,GAAT,CAAP;AACH;;AAED,oBAAI,CAACC,IAAL,EAAW;AACP,2BAAOP,IACFI,UADE,CACS,GADT,CAAP;AAEH;;AAED,oBAAMK,UAAUb,eAAec,cAAf,CAA8BH,KAAKJ,QAAnC,EAA6CA,QAA7C,CAAhB;;AAEA,oBAAI,CAACM,OAAL,EAAc;AACV,2BAAOT,IACFI,UADE,CACS,GADT,CAAP;AAEH;;AAED,oBAAMO,UAAU;AACZ;AACA;AACAC,yBAAKL,KAAKM;AAHE,iBAAhB;;AAMA,oBAAMC,QAAQjB,aAAakB,MAAb,CAAoBJ,OAApB,CAAd;;AAEA,uBAAOJ,KAAKJ,QAAZ;;AAEA,uBAAOH,IACFQ,IADE,CACG,EAAEM,YAAF,EAASP,UAAT,EADH,CAAP;AAEH,aA7BD;AA8BH;AAtCE,KAAP;AAwCH,C","file":"auth.controller.js","sourcesContent":["export default (User, { passwordHasher, tokenManager }) => {\n    return {\n        login: (req, res) => {\n            const { email, password } = req.body;\n\n            if (!email || !password) {\n                return res.sendStatus(400);\n            }\n\n            User.findOne({ email }, (err, user) => {\n                if (err) {\n                    return res.send(err);\n                }\n\n                if (!user) {\n                    return res\n                        .sendStatus(404);\n                }\n\n                const isMatch = passwordHasher.verifyPassword(user.password, password);\n\n                if (!isMatch) {\n                    return res\n                        .sendStatus(401);\n                }\n\n                const payload = {\n                    // exp: moment().add(jwtExpirationInterval, 'minutes').unix(),\n                    // iat: moment().unix(),\n                    sub: user._id,\n                };\n\n                const token = tokenManager.encode(payload);\n\n                delete user.password;\n\n                return res\n                    .send({ token, user });\n            });\n        }\n    };\n}"]}